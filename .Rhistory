# dc2/dt = a c1 - c2
p1 = c(0, c2modpteuler[match(i, t) -1])
p2 = c(a * c1modpteuler[match(i, t) -1],0)
d1 = p2
d2 = p1
p = matrix(c(p1,p2), nrow = len_y0, ncol = len_y0, byrow = T)
d = matrix(c(d1,d2), nrow = len_y0, ncol = len_y0, byrow = T)
ydat = c(c1modpteuler[match(i, t) -1],
c2modpteuler[match(i, t) -1])
avec[eye] = dt * c(sum(d1),
sum(d2)) / ydat +1
c_rep = rbind(ydat, ydat)
avec[eyetilde] = -dt * p[eyetilde] / c_rep[eyetilde]
r =  ydat + dt * p[eye]
c1modpteuler[match(i, t)] = solve(avec, r)[1]
c2modpteuler[match(i, t)] = solve(avec, r)[2]
}
#### NUMERICAL MODIFIED RUNGE-KUTTA PATANKAR SOLUTION
c1modptrk = rep(NA, length(t))
c2modptrk = rep(NA, length(t))
c1modptrk[1] = c10
c2modptrk[1] = c20
len_y0 = length(c(c10,c20))
eye = diag(len_y0)
eye = ifelse(eye == 1, TRUE, FALSE)
eyetilde = ifelse(eye == 1, FALSE, TRUE)
avec = eye * 0
r = avec[,1] * 0
for (i in t[2:length(t)]){
# dc1/dt = c2 - a c1
# dc2/dt = a c1 - c2
p1 = c(0, c2modpteuler[match(i, t) -1])
p2 = c(a * c1modpteuler[match(i, t) -1],0)
d1 = p2
d2 = p1
p0 = matrix(c(p1,p2), nrow = len_y0, ncol = len_y0, byrow = T)
d0 = matrix(c(d1,d2), nrow = len_y0, ncol = len_y0, byrow = T)
ydat = c(c1modpteuler[match(i, t) -1],
c2modpteuler[match(i, t) -1])
avec[eye] = dt * c(sum(d1),
sum(d2)) / ydat +1
c_rep = rbind(ydat, ydat)
avec[eyetilde] = -dt * p0[eyetilde] / c_rep[eyetilde]
r =  ydat + dt * p0[eye]
cproxy1 = solve(avec, r)[1]
cproxy2 = solve(avec, r)[2]
p1 = c(0, cproxy2)
p2 = c(a * cproxy1,0)
d1 = p2
d2 = p1
p = matrix(c(p1,p2), nrow = len_y0, ncol = len_y0, byrow = T)
d = matrix(c(d1,d2), nrow = len_y0, ncol = len_y0, byrow = T)
p = 0.5 * (p0 + p)
d = 0.5 * (d0 + d)
avec[eye] = dt * c(sum(d[1:2]),
sum(d[3:4])) / c(cproxy1, cproxy2) +1
c_rep = rbind(c(cproxy1, cproxy2), c(cproxy1, cproxy2))
avec[eyetilde] = -dt * p[eyetilde] / c_rep[eyetilde]
r = ydat + dt * p[eye]
c1modptrk[match(i, t)] = solve(avec, r)[1]
c2modptrk[match(i, t)] = solve(avec, r)[2]
}
#### PLOTTING OF RESULTS
df = rbind(
data.frame('time' = t, 'conc' = c1, 'type' = 'c1', 'solver' = 'Analytical'),
data.frame('time' = t, 'conc' = c1euler, 'type' = 'c1', 'solver' = 'Forward Euler'),
data.frame('time' = t, 'conc' = c1rk, 'type' = 'c1', 'solver' = 'Runge-Kutta 4th'),
data.frame('time' = t, 'conc' = c1pteuler, 'type' = 'c1', 'solver' = 'Patankar-Euler'),
data.frame('time' = t, 'conc' = c1modpteuler, 'type' = 'c1', 'solver' = 'Mod. Patankar-Euler'),
data.frame('time' = t, 'conc' = c1modptrk, 'type' = 'c1', 'solver' = 'Mod. Patankar-RK4'),
data.frame('time' = t, 'conc' = c2, 'type' = 'c2', 'solver' = 'Analytical'),
data.frame('time' = t, 'conc' = c2euler, 'type' = 'c2', 'solver' = 'Forward Euler'),
data.frame('time' = t, 'conc' = c2rk, 'type' = 'c2', 'solver' = 'Runge-Kutta 4th'),
data.frame('time' = t, 'conc' = c2pteuler, 'type' = 'c2', 'solver' = 'Patankar-Euler'),
data.frame('time' = t, 'conc' = c2modpteuler, 'type' = 'c2', 'solver' = 'Mod. Patankar-Euler'),
data.frame('time' = t, 'conc' = c2modptrk, 'type' = 'c2', 'solver' = 'Mod. Patankar-RK4')
)
ggplot(df) +
geom_line(aes(time, conc, col = solver, linetype = type)) +
theme_bw()
# Burchard et al. (2003) "A high-order conservative Patankar-type discretisation
# for stiff systems of productionâ€“destruction equations
library(tidyverse)
#### PROBLEM SET, TWO COUPLED ODES
# dc1/dt = c2 - a c1
# dc2/dt = a c1 - c2
dc1dt <- function(c1, c2, a){
return(c2 - a * c1)
}
dc2dt <- function(c1, c2, a){
return(a * c1 - c2)
}
#### PARAMETERS
a = 5
c10 = 0.9
c20 = 0.1
c1inf = (c10 + c20) / (a + 1)
dt = 0.25
t = seq(0, 1.8, dt)
c = c10/c1inf - 1
#### ANALYTICAL SOLUTION
c1 = (1 + c *  exp(-(a+1)* t)) * c1inf
c2 = c10 + c20 - c1
#### NUMERICAL EXPLICIT FORWARD EULER SOLUTION
c1euler = rep(NA, length(t))
c2euler = rep(NA, length(t))
c1euler[1] = c10
c2euler[1] = c20
for (i in t[2:length(t)]){
c1euler[match(i, t)] = c1euler[match(i, t) -1] +
dt * (c2euler[match(i, t) -1] - c1euler[match(i, t) -1] * a)
c2euler[match(i, t)] = c2euler[match(i, t) -1] +
dt * (a * c1euler[match(i, t) -1] - c2euler[match(i, t) -1])
}
#### NUMERICAL 4TH ORDER RUNGE KUTTA SOLUTION
c1rk = rep(NA, length(t))
c2rk = rep(NA, length(t))
c1rk[1] = c10
c2rk[1] = c20
for (i in t[2:length(t)]){
k1 = dc1dt(c1rk[match(i, t) -1], c2rk[match(i, t) -1], a)
l1 = dc2dt(c1rk[match(i, t) -1], c2rk[match(i, t) -1], a)
k2 = dc1dt(c1rk[match(i, t) -1] + 1/2 * dt * k1, c2rk[match(i, t) -1] + 1/2 * dt * l1, a)
l2 = dc2dt(c1rk[match(i, t) -1] + 1/2 * dt * k1, c2rk[match(i, t) -1] + 1/2 * dt * l1, a)
k3 = dc1dt(c1rk[match(i, t) -1] + 1/2 * dt * k2, c2rk[match(i, t) -1] + 1/2 * dt * l2, a)
l3 = dc2dt(c1rk[match(i, t) -1] + 1/2 * dt * k2, c2rk[match(i, t) -1] + 1/2 * dt * l2, a)
k4 = dc1dt(c1rk[match(i, t) -1] + dt * k3, c2rk[match(i, t) -1] + dt * l3, a)
l4 = dc2dt(c1rk[match(i, t) -1] + dt * k3, c2rk[match(i, t) -1] + dt * l3, a)
c1rk[match(i, t)] = c1rk[match(i, t) -1] +
dt * (1/6 * (k1 + 2 * k2 + 2 * k3 + k4))
c2rk[match(i, t)] = c2rk[match(i, t) -1] +
dt * (1/6 * (l1 + 2 * l2 + 2 * l3 + l4))
}
#### NUMERICAL EULER PATANKAR SOLUTION
c1pteuler = rep(NA, length(t))
c2pteuler = rep(NA, length(t))
c1pteuler[1] = c10
c2pteuler[1] = c20
for (i in t[2:length(t)]){
# dc1/dt = c2 - a c1
# dc2/dt = a c1 - c2
p1 = c2pteuler[match(i, t) -1]
p2 = a * c1pteuler[match(i, t) -1]
d1 = p2
d2 = p1
p = sum(p1,p2)
d = sum(d1,d2)
c1pteuler[match(i, t)] = (c1pteuler[match(i, t) -1] + dt * p1) /
(1 + dt * d1 / c1pteuler[match(i, t) -1])
c2pteuler[match(i, t)] = (c2pteuler[match(i, t) -1] + dt * p2) /
(1 + dt * d2 / c2pteuler[match(i, t) -1])
}
#### NUMERICAL MODIFIED EULER PATANKAR SOLUTION
c1modpteuler = rep(NA, length(t))
c2modpteuler = rep(NA, length(t))
c1modpteuler[1] = c10
c2modpteuler[1] = c20
len_y0 = length(c(c10,c20))
eye = diag(len_y0)
eye = ifelse(eye == 1, TRUE, FALSE)
eyetilde = ifelse(eye == 1, FALSE, TRUE)
avec = eye * 0
r = avec[,1] * 0
for (i in t[2:length(t)]){
# dc1/dt = c2 - a c1
# dc2/dt = a c1 - c2
p1 = c(0, c2modpteuler[match(i, t) -1])
p2 = c(a * c1modpteuler[match(i, t) -1],0)
d1 = p2
d2 = p1
p = matrix(c(p1,p2), nrow = len_y0, ncol = len_y0, byrow = T)
d = matrix(c(d1,d2), nrow = len_y0, ncol = len_y0, byrow = T)
ydat = c(c1modpteuler[match(i, t) -1],
c2modpteuler[match(i, t) -1])
avec[eye] = dt * c(sum(d1),
sum(d2)) / ydat +1
c_rep = rbind(ydat, ydat)
avec[eyetilde] = -dt * p[eyetilde] / c_rep[eyetilde]
r =  ydat + dt * p[eye]
c1modpteuler[match(i, t)] = solve(avec, r)[1]
c2modpteuler[match(i, t)] = solve(avec, r)[2]
}
#### NUMERICAL MODIFIED RUNGE-KUTTA PATANKAR SOLUTION
c1modptrk = rep(NA, length(t))
c2modptrk = rep(NA, length(t))
c1modptrk[1] = c10
c2modptrk[1] = c20
len_y0 = length(c(c10,c20))
eye = diag(len_y0)
eye = ifelse(eye == 1, TRUE, FALSE)
eyetilde = ifelse(eye == 1, FALSE, TRUE)
avec = eye * 0
r = avec[,1] * 0
for (i in t[2:length(t)]){
# dc1/dt = c2 - a c1
# dc2/dt = a c1 - c2
p1 = c(0, c2modpteuler[match(i, t) -1])
p2 = c(a * c1modpteuler[match(i, t) -1],0)
d1 = p2
d2 = p1
p0 = matrix(c(p1,p2), nrow = len_y0, ncol = len_y0, byrow = T)
d0 = matrix(c(d1,d2), nrow = len_y0, ncol = len_y0, byrow = T)
ydat = c(c1modpteuler[match(i, t) -1],
c2modpteuler[match(i, t) -1])
avec[eye] = dt * c(sum(d1),
sum(d2)) / ydat +1
c_rep = rbind(ydat, ydat)
avec[eyetilde] = -dt * p0[eyetilde] / c_rep[eyetilde]
r =  ydat + dt * p0[eye]
cproxy1 = solve(avec, r)[1]
cproxy2 = solve(avec, r)[2]
p1 = c(0, cproxy2)
p2 = c(a * cproxy1,0)
d1 = p2
d2 = p1
p = matrix(c(p1,p2), nrow = len_y0, ncol = len_y0, byrow = T)
d = matrix(c(d1,d2), nrow = len_y0, ncol = len_y0, byrow = T)
p = 0.5 * (p0 + p)
d = 0.5 * (d0 + d)
avec[eye] = dt * c(sum(d[1:2]),
sum(d[3:4])) / c(cproxy1, cproxy2) +1
c_rep = rbind(c(cproxy1, cproxy2), c(cproxy1, cproxy2))
avec[eyetilde] = -dt * p[eyetilde] / c_rep[eyetilde]
r = ydat + dt * p[eye]
c1modptrk[match(i, t)] = solve(avec, r)[1]
c2modptrk[match(i, t)] = solve(avec, r)[2]
}
#### PLOTTING OF RESULTS
df = rbind(
data.frame('time' = t, 'conc' = c1, 'type' = 'c1', 'solver' = 'Analytical'),
data.frame('time' = t, 'conc' = c1euler, 'type' = 'c1', 'solver' = 'Forward Euler'),
data.frame('time' = t, 'conc' = c1rk, 'type' = 'c1', 'solver' = 'Runge-Kutta 4th'),
data.frame('time' = t, 'conc' = c1pteuler, 'type' = 'c1', 'solver' = 'Patankar-Euler'),
data.frame('time' = t, 'conc' = c1modpteuler, 'type' = 'c1', 'solver' = 'Mod. Patankar-Euler'),
data.frame('time' = t, 'conc' = c1modptrk, 'type' = 'c1', 'solver' = 'Mod. Patankar-RK2'),
data.frame('time' = t, 'conc' = c2, 'type' = 'c2', 'solver' = 'Analytical'),
data.frame('time' = t, 'conc' = c2euler, 'type' = 'c2', 'solver' = 'Forward Euler'),
data.frame('time' = t, 'conc' = c2rk, 'type' = 'c2', 'solver' = 'Runge-Kutta 4th'),
data.frame('time' = t, 'conc' = c2pteuler, 'type' = 'c2', 'solver' = 'Patankar-Euler'),
data.frame('time' = t, 'conc' = c2modpteuler, 'type' = 'c2', 'solver' = 'Mod. Patankar-Euler'),
data.frame('time' = t, 'conc' = c2modptrk, 'type' = 'c2', 'solver' = 'Mod. Patankar-RK2')
)
ggplot(df) +
geom_line(aes(time, conc, col = solver, linetype = type)) +
theme_bw()
library(tidyverse)
library(rLakeAnalyzer)
library(LakeMetabolizer)
library(deSolve)
library(pracma)
Temp_raw <- read_delim('InputTest/temperate/output_temp.txt', skip = 8, delim = '\t')
setwd("~/Projects/GLEON2022/EezyPeezyISIOxy")
library(tidyverse)
library(rLakeAnalyzer)
library(LakeMetabolizer)
library(deSolve)
library(pracma)
Temp_raw <- read_delim('InputTest/temperate/output_temp.txt', skip = 8, delim = '\t')
str(Temp_raw)
head(Temp_raw)
Depth_raw <- read_delim('InputTest/temperate/output_z.txt', skip = 8, delim = '\t')
Depth <- as.numeric(Depth_raw[1, -1]) * (-1)
Area_raw <- read_delim('InputTest/temperate/hypsograph.dat', skip = 1, delim = ' ',
col_names = F)
# dO2/dt = Flux * (O2 / (Khalf + O2)) * Theta^(Temp - 20) * Area
# g/day = g/m2/day  * m2
Area_list = data.frame('Depth' = (Area_raw[, 1] - max(Area_raw[, 1])) * (-1), 'Area' = Area_raw[, 2])
Area_list = apply(Area_list, 2, rev)
Area_list <- as.data.frame(Area_list)
Temp <- Temp_raw
colnames(Temp) <- c('Datetime', paste0('wtr_', Depth))
Temp <- data.frame('datetime' = Temp$Datetime, rev(Temp[, 2:ncol(Temp)]))
head(Temp)
Temp <- Temp %>%
dplyr::filter(datetime >= as.POSIXct('2000-01-01') &
datetime <= as.POSIXct('2000-12-31'))
Stratification <- data.frame('Datetime' = Temp$datetime, 'Density.Diff' = water.density(Temp[, ncol(Temp)]) - water.density(Temp[, 2]))
Stratification$Stratif.Check <- ifelse(Stratification$Density.Diff >= 0.1, 1, NA)
ggplot(Stratification) + geom_line(aes(Datetime, Stratif.Check))
Strat.Period <- (na.contiguous(Stratification$Stratif.Check))
Temp <- Temp[attributes(Strat.Period)$tsp[1]:
attributes(Strat.Period)$tsp[2],]
Thermocline.depth <- ts.center.buoyancy(wtr = Temp)
str(Thermocline.depth)
ggplot(subset(Thermocline.depth, datetime > as.Date('2000-01-01') &
datetime < as.Date('2000-12-31')),
aes(datetime, cent.n2)) +
geom_path() +
geom_smooth() +
scale_y_reverse()
Thermocline.PK <- read.csv('InputTest/temperate/thermo_information.csv')
Strat.Period <- (na.contiguous(Thermocline.PK$stratified))
Thermocline.PK <- Thermocline.PK[attributes(Strat.Period)$tsp[1]:
attributes(Strat.Period)$tsp[2],]
Area_interp <- approx(Area_list$X1, Area_list$X2, seq(0, max(Area_list$X1), 0.1))$y
Area_interp <- data.frame('Depth' = seq(0, max(Area_list$X1), 0.1), 'Area' =
Area_interp)
#Area_interp$Volume <- rev(cumsum(Area_interp$Depth * Area_interp$Area))
Area_interp$Volume <- rev(cumtrapz(Area_interp$Depth , Area_interp$Area))
Volume <- approx(Area_interp$Depth, Area_interp$Volume, Thermocline.PK$thermocline_depth_smooth,
rule =2)$y # VOLUME FROM AREA DEPENDING ON THERMOCLINE DEPTH
Area <- approx(Area_interp$Depth, Area_interp$Area, Thermocline.PK$thermocline_depth_smooth,
rule = 2)$y # ACTIVE AREA FOR SEDIMENT FLUX
Temp <- Thermocline.PK$hypo_temp
###################################
Output <- c(NULL)
for (k in 1:10){
# Normal distributions for parameter assumptions
Flux <- rnorm(1, mean = -0.32, sd = 0.096)  # (g / m2 / d)
# 0.32 g/m2/d / 32 g/mol = 10 mmol O2/m2/d
Khalf <- rnorm(1, mean = 0.224, sd = 0.032)   # (g / m3)
Theta <- rnorm(1, mean = 1.07, sd = 0.03) # (-)
dt = 1
Oxygen <- rep(NA, length(Volume))
Oxygen[1] <- o2.at.sat.base(temp = Temp[1], altitude = 500) #* Volume[1] # g
for (i in 2:length(Oxygen)){
Oxygen[i] <- Oxygen[i - 1] +
((Area[i - 1] * Flux *
((Oxygen[i - 1]) / (Khalf + Oxygen[i - 1])) *
Theta^(Temp[i-1] - 20))) * dt  / Volume[i-1]
F_Oxygen = (((Area[i - 1] * Flux *
((Oxygen[i - 1]) / (Khalf + Oxygen[i - 1])) *
Theta^(Temp[i-1] - 20))))
Oxygen[i]  <- (Oxygen[i - 1]) / (1 + dt  / Volume[i-1] * F_Oxygen/Oxygen[i - 1])
}
Output <- cbind(Output, Oxygen)
}
Output_df = data.frame('Time' = Thermocline.PK$datetime, Output)
m.Output_df = pivot_longer(Output_df, 2:last_col())
m.Output_df <- m.Output_df %>%
mutate(Time = lubridate::as_datetime(Time))
ggplot(m.Output_df) +
geom_line(aes(Time, value, group = name)) +
theme_bw() + xlab('Date') + ylab('O2 [mg/L]') #+
# scale_x_datetime(date_labels = "%M-")
###################################
Time_linear <- seq(1, length(Temp), 1)
Area_linear <- approxfun(x = Time_linear, y = Area, method = "linear", rule = 2)
Volumediff_linear <- approxfun(x = Time_linear, y = (Volume)/lag(Volume), method = "linear", rule = 2)
Volume_linear <- approxfun(x = Time_linear, y = Volume, method = "linear", rule = 2)
Temp_linear <- approxfun(x = Time_linear, y = Temp, method = "linear", rule = 2)
# Model code
o2_model <- function(Time, State, Pars) {
with(as.list(c(State, Pars)), {
# cO2 <- y
SedimentFlux    <- Area_linear(Time) * Flux # m2 * g/m2/d
MichaelisMenten   <- ((cO2) / (Khalf + cO2)) # g/m3 / g/m3
ArrheniusCorrection <- Theta^(Temp_linear(Time) - 20) # -
dcO2        <-  SedimentFlux * MichaelisMenten * ArrheniusCorrection / Volume_linear(Time)
# m2 g/m2/d g/m3 / g/m3 m3 / m3 / m3 = g/m3/d
return(list(c(dcO2)))
})
}
# Define parameters for model
parameters <- c(Flux = Flux, Khalf = Khalf, Theta = Theta)
yini <- c(cO2 = o2.at.sat.base(temp = Temp[1], altitude = 500)) # g/m3
# Runge-Kutta 4th-order model solver
Output_ode <- ode(times = Time_linear, y = yini, func = o2_model,
parms = parameters, method = 'rk4')
plot(Output_ode[, 2])
###################################
Output = c(NULL)
for (k in 1:1000){
# Normal distributions for parameter assumptions
Flux <- rnorm(1, mean = -0.32, sd = 0.096)  # (g / m2 / d)
# 0.32 g/m2/d / 32 g/mol = 10 mmol O2/m2/d
# Although eutrophic lakes tend to have a high sediment oxygen demand,
# with specific values ranging from 0.3 g m???2 d???1 (Romero et al., 2004;
# Steinsberger et al., 2019) to extreme values of 80 g m???2 d???1 (Cross and
# Summerfelt, 1987), most studies measured or applied a value between 1 and
# 4 g m???2 d???1 (Mi et al., 2020; Veenstra and Nolen, 1991).
Khalf <- rnorm(1, mean = 0.224, sd = 0.032)   # (g / m3)
Theta <- rnorm(1, mean = 1.07, sd = 0.03) # (-)
parameters <- c(Flux = Flux, Khalf = Khalf, Theta = Theta)
Output_ode <- ode(times = Time_linear, y = yini, func = o2_model,
parms = parameters, method = 'rk4')
Output <- cbind(Output, Output_ode[, 2])
}
Output_df = data.frame('Time' = Thermocline.PK$datetime, Output)
m.Output_df = pivot_longer(Output_df, 2:last_col())
m.Output_df <- m.Output_df %>%
mutate(Time = lubridate::as_datetime(Time))
ggplot(m.Output_df) +
geom_line(aes(Time, value, group = name)) +
theme_bw() + xlab('Date') + ylab('O2 [mg/L]')
library(tidyverse)
library(rLakeAnalyzer)
library(LakeMetabolizer)
library(deSolve)
library(pracma)
Temp_raw <- read_delim('InputTest/temperate/output_temp.txt', skip = 8, delim = '\t')
str(Temp_raw)
head(Temp_raw)
Depth_raw <- read_delim('InputTest/temperate/output_z.txt', skip = 8, delim = '\t')
Depth <- as.numeric(Depth_raw[1, -1]) * (-1)
Area_raw <- read_delim('InputTest/temperate/hypsograph.dat', skip = 1, delim = ' ',
col_names = F)
# dO2/dt = Flux * (O2 / (Khalf + O2)) * Theta^(Temp - 20) * Area
# g/day = g/m2/day  * m2
Area_list = data.frame('Depth' = (Area_raw[, 1] - max(Area_raw[, 1])) * (-1), 'Area' = Area_raw[, 2])
Area_list = apply(Area_list, 2, rev)
Area_list <- as.data.frame(Area_list)
Temp <- Temp_raw
colnames(Temp) <- c('Datetime', paste0('wtr_', Depth))
Temp <- data.frame('datetime' = Temp$Datetime, rev(Temp[, 2:ncol(Temp)]))
head(Temp)
Temp <- Temp %>%
dplyr::filter(datetime >= as.POSIXct('2000-01-01') &
datetime <= as.POSIXct('2000-12-31'))
Stratification <- data.frame('Datetime' = Temp$datetime, 'Density.Diff' = water.density(Temp[, ncol(Temp)]) - water.density(Temp[, 2]))
Stratification$Stratif.Check <- ifelse(Stratification$Density.Diff >= 0.1, 1, NA)
ggplot(Stratification) + geom_line(aes(Datetime, Stratif.Check))
Strat.Period <- (na.contiguous(Stratification$Stratif.Check))
Temp <- Temp[attributes(Strat.Period)$tsp[1]:
attributes(Strat.Period)$tsp[2],]
Thermocline.depth <- ts.center.buoyancy(wtr = Temp)
str(Thermocline.depth)
ggplot(subset(Thermocline.depth, datetime > as.Date('2000-01-01') &
datetime < as.Date('2000-12-31')),
aes(datetime, cent.n2)) +
geom_path() +
geom_smooth() +
scale_y_reverse()
Thermocline.PK <- read.csv('InputTest/temperate/thermo_information.csv')
Strat.Period <- (na.contiguous(Thermocline.PK$stratified))
Thermocline.PK <- Thermocline.PK[attributes(Strat.Period)$tsp[1]:
attributes(Strat.Period)$tsp[2],]
Area_interp <- approx(Area_list$X1, Area_list$X2, seq(0, max(Area_list$X1), 0.1))$y
Area_interp <- data.frame('Depth' = seq(0, max(Area_list$X1), 0.1), 'Area' =
Area_interp)
#Area_interp$Volume <- rev(cumsum(Area_interp$Depth * Area_interp$Area))
Area_interp$Volume <- rev(cumtrapz(Area_interp$Depth , Area_interp$Area))
Volume <- approx(Area_interp$Depth, Area_interp$Volume, Thermocline.PK$thermocline_depth_smooth,
rule =2)$y # VOLUME FROM AREA DEPENDING ON THERMOCLINE DEPTH
Area <- approx(Area_interp$Depth, Area_interp$Area, Thermocline.PK$thermocline_depth_smooth,
rule = 2)$y # ACTIVE AREA FOR SEDIMENT FLUX
Temp <- Thermocline.PK$hypo_temp
###################################
Output <- c(NULL)
for (k in 1:10){
# Normal distributions for parameter assumptions
Flux <- rnorm(1, mean = -0.32, sd = 0.096)  # (g / m2 / d)
# 0.32 g/m2/d / 32 g/mol = 10 mmol O2/m2/d
Khalf <- rnorm(1, mean = 0.224, sd = 0.032)   # (g / m3)
Theta <- rnorm(1, mean = 1.07, sd = 0.03) # (-)
dt = 1
Oxygen <- rep(NA, length(Volume))
Oxygen[1] <- o2.at.sat.base(temp = Temp[1], altitude = 500) #* Volume[1] # g
for (i in 2:length(Oxygen)){
Oxygen[i] <- Oxygen[i - 1] +
((Area[i - 1] * Flux *
((Oxygen[i - 1]) / (Khalf + Oxygen[i - 1])) *
Theta^(Temp[i-1] - 20))) * dt  / Volume[i-1]
F_Oxygen = (((Area[i - 1] * Flux *
((Oxygen[i - 1]) / (Khalf + Oxygen[i - 1])) *
Theta^(Temp[i-1] - 20))))
Oxygen[i]  <- (Oxygen[i - 1]) / (1 + dt  / Volume[i-1] * F_Oxygen/Oxygen[i - 1])
}
Output <- cbind(Output, Oxygen)
}
Output_df = data.frame('Time' = Thermocline.PK$datetime, Output)
m.Output_df = pivot_longer(Output_df, 2:last_col())
m.Output_df <- m.Output_df %>%
mutate(Time = lubridate::as_datetime(Time))
ggplot(m.Output_df) +
geom_line(aes(Time, value, group = name)) +
theme_bw() + xlab('Date') + ylab('O2 [mg/L]') #+
# scale_x_datetime(date_labels = "%M-")
###################################
Time_linear <- seq(1, length(Temp), 1)
Area_linear <- approxfun(x = Time_linear, y = Area, method = "linear", rule = 2)
Volumediff_linear <- approxfun(x = Time_linear, y = (Volume)/lag(Volume), method = "linear", rule = 2)
Volume_linear <- approxfun(x = Time_linear, y = Volume, method = "linear", rule = 2)
Temp_linear <- approxfun(x = Time_linear, y = Temp, method = "linear", rule = 2)
# Model code
o2_model <- function(Time, State, Pars) {
with(as.list(c(State, Pars)), {
# cO2 <- y
SedimentFlux    <- Area_linear(Time) * Flux # m2 * g/m2/d
MichaelisMenten   <- ((cO2) / (Khalf + cO2)) # g/m3 / g/m3
ArrheniusCorrection <- Theta^(Temp_linear(Time) - 20) # -
dcO2        <-  SedimentFlux * MichaelisMenten * ArrheniusCorrection / Volume_linear(Time)
# m2 g/m2/d g/m3 / g/m3 m3 / m3 / m3 = g/m3/d
return(list(c(dcO2)))
})
}
# Define parameters for model
parameters <- c(Flux = Flux, Khalf = Khalf, Theta = Theta)
yini <- c(cO2 = o2.at.sat.base(temp = Temp[1], altitude = 500)) # g/m3
# Runge-Kutta 4th-order model solver
Output_ode <- ode(times = Time_linear, y = yini, func = o2_model,
parms = parameters, method = 'rk4')
plot(Output_ode[, 2])
###################################
Output = c(NULL)
for (k in 1:1000){
# Normal distributions for parameter assumptions
Flux <- rnorm(1, mean = -5.32, sd = 0.096)  # (g / m2 / d)
Khalf <- rnorm(1, mean = 0.224, sd = 0.032)   # (g / m3)
Theta <- rnorm(1, mean = 1.07, sd = 0.03) # (-)
parameters <- c(Flux = Flux, Khalf = Khalf, Theta = Theta)
Output_ode <- ode(times = Time_linear, y = yini, func = o2_model,
parms = parameters, method = 'rk4')
Output <- cbind(Output, Output_ode[, 2])
}
Output_df = data.frame('Time' = Thermocline.PK$datetime, Output)
m.Output_df = pivot_longer(Output_df, 2:last_col())
m.Output_df <- m.Output_df %>%
mutate(Time = lubridate::as_datetime(Time))
ggplot(m.Output_df) +
geom_line(aes(Time, value, group = name)) +
theme_bw() + xlab('Date') + ylab('O2 [mg/L]')
